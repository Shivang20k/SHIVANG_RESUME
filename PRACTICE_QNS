public static String reverse (String s) {
            StringBuffer stringBuffer = new StringBuffer(s);
            StringBuilder stringBuilder = new StringBuilder(s);
            
            stringBuffer.reverse();
            stringBuilder.reverse();
            System.out.println(stringBuffer);

            char[] chars = s.toCharArray();
            for(int i = 0; i < chars.length / 2; i++) {
                char temp = chars[i];
                chars[i] = chars[chars.length - i - 1];
                chars[chars.length - i - 1] = temp;
            }
            String s2 = new String(chars);
            System.out.println(s2);
        }

public fibbonaci(n) {
            int n = 5;
            if (n < 1) {
                System.out.println(0);
            } else {
                int a = 0;
                int b = 1;
                for (int i = 0; i < n; i++) {
//                System.out.println(a);
                    int temp = a;
                    a = b;
                    b = temp + b;
                }
                System.out.println(a);
            }
        }
    }

public findMax(n) {
        int[] arr = new int[6];
        arr[0] = 1;
        arr[1] = 2;
        arr[2] = 3;
        arr[3] = 4;
        arr[4] = 5;
        arr[5] = 6;
        Integer max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        System.out.println(max);

        List<Integer> l =new ArrayList<>();
        l.addAll(List.of(1, 2, 3, 4, 5, 6, 7));
        System.out.println(Collections.max(l));
}

public removeDuplicates() {
  List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5));
Set<Integer> set = new HashSet<>(list);
list.clear();
list.addAll(set);

List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5));
list = list.stream()
           .distinct()
           .collect(Collectors.toList());

List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5));
List<Integer> result = new ArrayList<>();
for (Integer num : list) {
    if (!result.contains(num)) {
        result.add(num);
    }
}
}

public roatateArrayByK(integer k) {
         ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6));
        List<Integer> extracted = new ArrayList<>(arrayList.subList(0, k));
        List<Integer> l2 = arrayList.stream().skip(k).toList();
        arrayList.clear();
        arrayList.addAll(l2);
        arrayList.addAll(extracted);
        System.out.println(arrayList);
}

public countOccurenecesOfCharacterInArray() {
        StringBuilder stringBuilder = new StringBuilder("hello");
        char[] chars = stringBuilder.toString().toCharArray();
        Map<Character, Integer> map = new HashMap<>();
        for(char c : chars) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        System.out.println(map.get('e'));
        System.out.println(StringUtils.countOccurrencesOf(stringBuilder.toString(), "l"));
}

public palinDrome() {
        String s = "helloolleh";
        char[] c = s.toCharArray();
        int l = 0;
        int r = c.length - 1;
        while (l < r) {
            if(c[l] != c[r]) {
                System.out.println("false");
                break;
            }
            l++;
            r--;
        }
        System.out.println("true");
}

public removeDuplicateCharsFromString() {
        String s = "helloolleh";
        char[] chars = s.toCharArray();
        Set<Character> set = new LinkedHashSet<>();
        for(char ch: chars) {
            set.add(ch);
        }
        StringBuilder stringBuilder  = new StringBuilder();
        for(char ch: set) {
            stringBuilder.append(ch);
        }
        System.out.println(stringBuilder);
}

